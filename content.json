{"pages":[{"title":"","text":"about소개관심 기술경력","link":"/about/index.html"}],"posts":[{"title":"AWS CLI 설치(WSL Ubuntu 20.04 LTS)","text":"AWS Command Line Interface이란 무엇인가요?AWS Command Line Interface(AWS CLI)는 명령줄 셸의 명령을 사용하여 AWS 서비스와 상호 작용할 수 있는 오픈 소스 도구입니다. 최소한의 구성으로 AWS CLI를 사용하면 터미널 프로그램에 있는 명령 프롬프트에서 브라우저 기반 AWS Management Console에서 제공하는 것과 동일한 기능을 구현하는 명령을 실행할 수 있습니다.AWS CLI 버전2은 python3 설치필요하지 않습니다. (버전1은 python3 설치 필요) AWS CLI 버전 2 설치(WSL Ubuntu 20.04 LTS)12345678910111213# curl 을 통한 awscli 2.2.16 버전 다운로드 합니다.# -o 옵션은 다운로드한 패키지가 기록되는 파일 이름을 지정합니다.$ curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.2.16..zip&quot; -o &quot;awscliv2.zip&quot;# 압축해제# 패키지의 압축을 풀고 현재 디렉터리 아래에 aws라는 디렉터리를 만듭니다.$ unzip awscliv2.zip# sudo root 권한을 통한 해당 파일 실행$ sudo ./aws/install# 설치 확인$ aws --version AWS CLI 버전 2 업데이트(WSL Ubuntu 20.04 LTS)12345678910111213141516171819202122# curl 을 통한 awscli 2.2.16 버전 다운로드 합니다.# -o 옵션은 다운로드한 패키지가 기록되는 파일 이름을 지정합니다.$ curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.2.16..zip&quot; -o &quot;awscliv2.zip&quot;# 압축해제# 패키지의 압축을 풀고 현재 디렉터리 아래에 aws라는 디렉터리를 만듭니다.$ unzip awscliv2.zip# 현재 AWS CLI 버전 2와 동일한 위치에 업데이트가 설치되도록 하려면 기존 symlink 및 설치 디렉터리를 찾습니다.$ which aws/usr/local/bin/aws# symlink가 가리키는 디렉터리를 찾습니다.$ ls -l /usr/local/bin/awslrwxrwxrwx 1 ec2-user ec2-user 49 Oct 22 09:49 /usr/local/bin/aws -&gt; /usr/local/aws-cli/v2/current/bin/aws# symlink 및 설치 관리자 정보를 사용하여 install 파라미터로 --update 명령을 생성합니다.$ sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update# 설치 확인$ aws --versionaws-cli/2.2.16 Python/3.8.8 Linux/4.19.104-microsoft-standard exe/x86_64.ubuntu.20 prompt/off 참고 링크 : AWS Documentation","link":"/2021/09/05/AWS%20CLI%20%EC%84%A4%EC%B9%98(linux)/"},{"title":"WSL Ubuntu 20.04 LTS 설치","text":"Linux용 Windows 하위 시스템 사용Windows에서 Linux 배포를 설치하려면 먼저 “Linux용 Windows 하위 시스템” 옵션 기능을 사용하도록 설정합니다. PowerShell을 관리자 권한으로 열어 실행합니다. 1dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Virtual Machine 기능 사용WSL 2를 설치하려면 먼저 Virtual Machine 플랫폼 옵션 기능을 사용하도록 설정해야 합니다. 이 기능을 사용하려면 머신에 가상화 기능이 필요합니다. PowerShell을 관리자 권한으로 열어 실행합니다. 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart WSL 2를 기본 버전으로 설정PowerShell을 열고 이 명령을 실행하여 새 Linux 배포를 설치할 때 WSL 2를 기본 버전으로 설정합니다. 1wsl --set-default-version 2 리눅스 설치Microsoft Store를 열고 즐겨 찾는 Linux 배포를 선택합니다. 저의 경우 Ubuntu 20.04 LTS 검색하여 설치하였습니다. 참고 링크 : Microsoft WSL","link":"/2021/09/05/WSL%20Ubuntu%2020.04%20LTS%20%EC%84%A4%EC%B9%98/"},{"title":"[프로그래머스] 숫자 문자열과 영단어","text":"숫자 문자열과 영단어문제설명네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다. 다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다. 1478 → “one4seveneight” 234567 → “23four5six7” 10203 → “1zerotwozero3”이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요. 참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다. 숫자 영단어 0 zero 1 one 2 two 3 three 4 four 5 five 6 six 7 seven 8 eight 9 nine 제한사항 1 ≤ s의 길이 ≤ 50 s가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다. return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다. 입출력 예 s result “one4seveneight” 1478 “23four5six7” 234567 “2three45sixseven” 234567 “123” 123 입출력 예 설명입출력 예 #1 문제 예시와 같습니다. 입출력 예 #2 문제 예시와 같습니다. 입출력 예 #3 “three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다. 입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다. 입출력 예 #4 s에는 영단어로 바뀐 부분이 없습니다. 자바스크립트 제출 코드1234567891011121314function solution(s) { var answer = 0; var englishWordArray = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',' nine']; englishWordArray.forEach((word, index) =&gt; { if(s.includes(word)) { var reg = new RegExp(`${word}`,&quot;g&quot;); s = s.replace(reg, String(index)); } }); answer = parseInt(s); return answer;}","link":"/2021/09/08/%5B%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%5D%EC%88%AB%EC%9E%90%20%EB%AC%B8%EC%9E%90%EC%97%B4%EA%B3%BC%20%EC%98%81%EB%8B%A8%EC%96%B4/"},{"title":"[프로그래머스] 로또의 최고 순위와 최저 순위","text":"로또의 최고 순위와 최저 순위문제설명로또 6/45(이하 ‘로또’로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 순위 당첨내용 1 6개 번호가 모두 일치 2 5개 번호가 일치 3 4개 번호가 일치 4 3개 번호가 일치 5 2개 번호가 일치 6(낙첨) 그 외 로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다. 당첨 번호 31 10 45 1 6 19 결과 최고 순위 번호 31 0→10 44 1 0→6 25 4개 번호 일치, 3등 최저 순위 번호 31 0→11 44 1 0→7 25 2개 번호 일치, 5등 순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다. 알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다. 3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다. 알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다. 5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다. 민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요. 제한사항 lottos는 길이 6인 정수 배열입니다. lottos의 모든 원소는 0 이상 45 이하인 정수입니다. 0은 알아볼 수 없는 숫자를 의미합니다. 0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다. lottos의 원소들은 정렬되어 있지 않을 수도 있습니다. win_nums은 길이 6인 정수 배열입니다. win_nums의 모든 원소는 1 이상 45 이하인 정수입니다. win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다. win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다. 입출력 예 lottos win_nums result [44, 1, 0, 0, 31, 25] [31, 10, 45, 1, 6, 19] [3, 5] [0, 0, 0, 0, 0, 0] [38, 19, 20, 40, 15, 25] [1, 6] [45, 4, 35, 20, 3, 9] [20, 9, 3, 45, 4, 35] [1, 1] 입출력 예 설명입출력 예 #1문제 예시와 같습니다. 입출력 예 #2알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다. 당첨 번호 38 19 20 40 15 25 결과 최고 순위 번호 0→38 0→19 0→20 0→40 0→15 0→25 6개 번호 일치, 1등 최저 순위 번호 0→21 0→22 0→23 0→24 0→26 0→27 0개 번호 일치, 6등 입출력 예 #3민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다. 자바스크립트 제출 코드12345678910111213function solution(lottos, win_nums) { var answer = []; var numberInclude = n =&gt; win_nums.includes(n); var max = lottos.filter(n =&gt; numberInclude(n) || n === 0).length; var min = lottos.filter(n =&gt; numberInclude(n)).length; var data1 = (max == 0) ? 6 - max : 7 - max; var data2 = (min == 0) ? 6 - min : 7 - min; answer = [...answer, data1, data2]; return answer;}","link":"/2021/09/06/%5B%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%5D%EB%A1%9C%EB%98%90%EC%9D%98%20%EC%B5%9C%EA%B3%A0%20%EC%88%9C%EC%9C%84%EC%99%80%20%EC%B5%9C%EC%A0%80%20%EC%88%9C%EC%9C%84/"},{"title":"[프로그래머스] 신규 아이디 추천","text":"신규 아이디 추천문제설명카카오에 입사한 신입 개발자 네오는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.다음은 카카오 아이디의 규칙입니다. 아이디의 길이는 3자 이상 15자 이하여야 합니다. 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다. 단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다. “네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.신규 유저가 입력한 아이디가 new_id 라고 한다면, 123456781단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.5단계 new_id가 빈 문자열이라면, new_id에 &quot;a&quot;를 대입합니다.6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다. 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다. 예를 들어, new_id 값이 “...!@BaT#*..y.abcdefghijklm” 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다. 1단계 대문자 ‘B’와 ‘T’가 소문자 ‘b’와 ‘t’로 바뀌었습니다. “...!@BaT#..y.abcdefghijklm” → “...!@bat#..y.abcdefghijklm” 2단계 ‘!’, ‘@’, ‘#’, ‘*’ 문자가 제거되었습니다. “...!@bat#*..y.abcdefghijklm” → “…bat..y.abcdefghijklm” 3단계 ‘…’와 ‘..’ 가 ‘.’로 바뀌었습니다. “…bat..y.abcdefghijklm” → “.bat.y.abcdefghijklm” 4단계 아이디의 처음에 위치한 ‘.’가 제거되었습니다. “.bat.y.abcdefghijklm” → “bat.y.abcdefghijklm” 5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다. “bat.y.abcdefghijklm” → “bat.y.abcdefghijklm” 6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다. “bat.y.abcdefghijklm” → “bat.y.abcdefghi” 7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다. “bat.y.abcdefghi” → “bat.y.abcdefghi” 따라서 신규 유저가 입력한 new_id가 “...!@BaT#*..y.abcdefghijklm”일 때, 네오의 프로그램이 추천하는 새로운 아이디는 “bat.y.abcdefghi” 입니다. [문제]신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요. [제한사항]new_id는 길이 1 이상 1,000 이하인 문자열입니다.new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&amp;*()=+[{]}:?,&lt;&gt;/ 로 한정됩니다. [입출력 예] no new_id result 예1 “...!@BaT#*..y.abcdefghijklm” “bat.y.abcdefghi” 예2 “z-+.^.” “z–” 예3 “=.=” “aaa” 예4 “123_.def” “123_.def” 예5 “abcdefghijklmn.p” “abcdefghijklmn” 입출력 예에 대한 설명입출력 예 #1문제의 예시와 같습니다. 입출력 예 #27단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다. 1단계 변화 없습니다.2단계 “z-+.^.” → “z-..”3단계 “z-..” → “z-.”4단계 “z-.” → “z-“5단계 변화 없습니다.6단계 변화 없습니다.7단계 “z-“ → “z–” 입출력 예 #37단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다. 1단계 변화 없습니다.2단계 “=.=” → “.”3단계 변화 없습니다.4단계 “.” → “” (new_id가 빈 문자열이 되었습니다.)5단계 “” → “a”6단계 변화 없습니다.7단계 “a” → “aaa” 입출력 예 #41단계에서 7단계까지 거치는 동안 new_id(“123_.def”)는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다. 입출력 예 #51단계 변화 없습니다.2단계 변화 없습니다.3단계 변화 없습니다.4단계 변화 없습니다.5단계 변화 없습니다.6단계 “abcdefghijklmn.p” → “abcdefghijklmn.” → “abcdefghijklmn”7단계 변화 없습니다. 자바스크립트 제출 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768function solution(new_id) { var answer = ''; // 대문자 -&gt; 소문자 변환 answer = new_id.toLowerCase(); // 알파벳 소문자, 숫자, 빼기, 밑줄, 마침표를 제외 var reg2 = /[\\{\\}\\[\\]\\/?,;:|\\)*~`!^\\+&lt;&gt;@\\#$%&amp;\\\\\\=\\(\\'\\&quot;]/gi; if(reg2.test(answer)) answer = answer.replace(reg2, &quot;&quot;); // console.log(answer); // 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다. var reg3 = /\\.+(?=)/g; if(reg3.test(answer)) answer = answer.replace(reg3, &quot;.&quot;); // console.log(answer); // 마침표(.)가 처음이나 끝에 위치한다면 제거합니다. var reg4_1 = /^\\./; var reg4_2 = /\\.$/; if(reg4_1.test(answer)) answer = answer.replace(reg4_1, &quot;&quot;); if(reg4_2.test(answer)) answer = answer.replace(reg4_2, &quot;&quot;); // console.log(answer); // 빈 문자열이라면, new_id에 &quot;a&quot;를 대입합니다. var reg5 = /\\s/g; if(reg5.test(answer)) answer = answer.replace(reg5, &quot;a&quot;); if(!answer) answer = answer.replace(&quot;&quot;, &quot;a&quot;); // console.log(answer); // 길이가 16자 이상이면, 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다. // 만약 제거 후 마침표(.)가 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다. // var reg5 =/^(?=[\\S\\s]{1,15}$)[\\S\\s]*/; if(answer.length &gt;= 16) answer = answer.slice(0,15); if(answer.charAt(answer.length-1) == &quot;.&quot;) answer = answer.slice(0,-1); // console.log(answer); // 길이가 2자 이하라면, 마지막 문자를 길이가 3이 될 때까지 반복해서 끝에 붙입니다. if(answer.length &lt;= 2) { var sliceStr = answer.charAt(answer.length-1); // console.log(answer.length); // console.log(sliceStr); for (var i = answer.length; i &lt; 3; i++) { answer += sliceStr; } } // console.log(answer); return answer;}/* 정규식 체인을 통한 정답..*/function solution(new_id) { const answer = new_id .toLowerCase() // 1 .replace(/[^\\w-_.]/g, '') // 2 .replace(/\\.+/g, '.') // 3 .replace(/^\\.|\\.$/g, '') // 4 .replace(/^$/, 'a') // 5 .slice(0, 15).replace(/\\.$/, ''); // 6 const len = answer.length; return len &gt; 2 ? answer : answer + answer.charAt(len - 1).repeat(3 - len);}","link":"/2021/09/07/%5B%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%5D%EC%8B%A0%EA%B7%9C%20%EC%95%84%EC%9D%B4%EB%94%94%20%EC%B6%94%EC%B2%9C/"},{"title":"카테고리테스트","text":"","link":"/2021/09/04/php%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/09/04/hello-world/"},{"title":"test","text":"","link":"/2021/09/04/test/"},{"title":"카테고리테스트","text":"","link":"/2021/09/04/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC%ED%85%8C%EC%8A%A4%ED%8A%B8/"}],"tags":[{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"WSL","slug":"WSL","link":"/tags/WSL/"},{"name":"알고리즘","slug":"알고리즘","link":"/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"AWS","slug":"AWS","link":"/categories/AWS/"},{"name":"Server","slug":"Server","link":"/categories/Server/"},{"name":"알고리즘","slug":"알고리즘","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"backend","slug":"backend","link":"/categories/backend/"},{"name":"Hexo Blog","slug":"Hexo-Blog","link":"/categories/Hexo-Blog/"},{"name":"php","slug":"backend/php","link":"/categories/backend/php/"},{"name":"java","slug":"backend/java","link":"/categories/backend/java/"}]}